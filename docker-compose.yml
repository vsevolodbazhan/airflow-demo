version: '3'

x-airflow-common: &airflow-common
  image: apache/airflow:2.6.3-python3.10
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__CORE__FERNET_KEY: 0wmxbE7GMuz4FmSjbUy_1oyT49lrsbizuB4K9F0OqjQ=
    AIRFLOW__WEBSERVER__SECRET_KEY: llJZGpD6Wj181Jaz5CWg5ydmf0JxnMS6jIv7M8Ue-Xw=
    AIRFLOW__WEBSERVER__WORKERS: 1
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@airflow-database:5432/airflow
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
    SQLALCHEMY_SILENCE_UBER_WARNING: 1

services:
  airflow-database:
    image: postgres:13
    container_name: airflow-database
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: airflow
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--dbname=airflow",
          "--username=admin"
        ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow db upgrade
        airflow users create \
          --username admin \
          --password admin \
          --firstname John \
          --lastname Doe \
          --role Admin \
          --email admin@example.com
    restart: on-failure
    depends_on:
      airflow-database:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags:r
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8974/health"
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 15s
    restart: always
    depends_on:
      airflow-database:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-database:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

networks:
  default:
    name: airflow-network
